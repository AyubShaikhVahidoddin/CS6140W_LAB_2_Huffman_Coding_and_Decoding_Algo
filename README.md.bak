# CS6140W_LAB_2_Huffman_Coding_and_Decoding_Algo
The code Implementation of Huffman_Coding_and_Decoding_Algorithm.

* Name: AYUB SHAIKH VAHIDODDIN
* Roll Number: CS21M515
* Email Id: ayub.shaikh.vahid@gmail.com

I HAVE DID THIS Code and is compiled and I have uploded code in this online Compiler :
https://onlinegdb.com/WSjFnbmFg
just click on this link( https://onlinegdb.com/WSjFnbmFg )
it will take you to the project there you can directly RUN the program i have uploded same code in this compiler you can check the code same as in git repo it was created by me so that it is easy for you sir to verify instead downloading the exe sometime it block by antivirus so problem to running .exe or creating .exe. please check and let me know in case any issue üëç **

* The time complexity of the Huffman algorithm is O(nlogn). 
* Using a heap to store the weight of each tree, each iteration requires O(logn) time to determine the cheapest weight and insert the new weight. There are O(n) iterations, one for each item.

Huffman coding and decoding Output :
![huffman_code_decode_algo_Output_1](https://user-images.githubusercontent.com/94394753/169658316-1add170a-e537-460d-9bee-610e16e3c54c.png)
![huffman_code_decode_algo_Output_2](https://user-images.githubusercontent.com/94394753/169658326-8ad2a5cb-5e17-4794-a1e0-548eab3fa46d.png)
![huffman_code_algo_Input_Encode_3](https://user-images.githubusercontent.com/94394753/169658338-8bc4cf0f-c5ff-4742-bf4d-9aea881aba0f.png)
![huffman_code_algo_Input_DEcode_3](https://user-images.githubusercontent.com/94394753/169658345-1f82773e-46b1-4a98-83cc-f8667e8688d3.png)
![huffman_code_decode_algo_Output_5](https://user-images.githubusercontent.com/94394753/169658351-ec1da313-6450-43af-b0ea-9bf6b17cc135.png)

* Time COmplexity:-
Time complexity for encoding :- O(nlog n) , each unique character based on its frequency is
* Extracting min frequency from the priority queue takes place 2*(n-1) times and its complexity is O(log n) .
* Thus the overall complexity is O(nlog n).
